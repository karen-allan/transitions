import {Component, Input, OnInit} from '@angular/core';
import { RepNine} from "../../../ts-files/rep-nine";
import {MatDialog, MatDialogConfig} from "@angular/material/dialog";
// import {PlanWizardPopupComponent} from "../../../menu-plan-ahead/think-about-needs/think-about-needs-wizard/plan-wizard-popup/plan-wizard-popup.component";

@Component({
  selector: 'app-rep-nine-wizard-overview',
  templateUrl: './rep-nine-wizard-overview.component.html',
  styleUrls: ['./rep-nine-wizard-overview.component.css']
})

export class RepNineWizardOverviewComponent implements OnInit {

  provinces = ['British Columbia', 'Alberta', 'Saskatchewan', 'Manitoba', 'Ontario', 'Quebec', 'Prince Edward Island', 'New Brunswick', 'Nova Scotia', 'Newfoundland',
    'Northwest Territories', 'Nunavut', 'Yukon'];

  model  = new RepNine('', '', '', '', this.provinces[0], '',
      '', '', '', '', this.provinces[0],
      '', '', '', '', '',
      this.provinces[0], '', '', '', '', '',
      '', this.provinces[0], '', '',
      '', '', '', this.provinces[0], '', '' ,'',
      '', '', '');

  @Input() title='';
  page: number = -1;
  now:string;
  errorMessage:string='';
  public postalMask = [/[A-Y]/, /\d/, /[A-Z]/, /\d/, /[A-Z]/, /\d/];
  printForm:boolean=false;

  // @ViewChild(RepNineFinalComponent) repNineComponent: RepNineFinalComponent;

  constructor(public matDialog: MatDialog) { }

  ngOnInit(): void {
    this.getCurrentDate();

    // this.setClientDefaults();
    this.setRepOneDefaults();
    this.setRepTwoDefaults();

    this.setWitnessOneDefaults();
    this.setWitnessTwoDefaults();

    this.getNextPage();
  }

 /* transform(value: any, args?: any): any {
    if (value !== null && value !== undefined) {
      if (value.length >= 4 && value.indexOf(' ') == -1) {
        return value.substring(0, 3) + "-" + value.substring(3, value.length);
      }
      return value;
    }
  }*/

  getNextPage() {
    this.page = this.page + 1;
    // alert("page is " + this.page)
  }

  finished() {
    this.page = this.page + 1;
    alert("page is " + this.page + " and we are done!")
  }

  printTSDM() {
    alert("printing this report!")
  }

  /* *************************************************************************************************************** */
  checkClientNameAddress(): void {
      if (this.model.client_name.length == 0) {
        this.errorMessage="You must enter your full legal name here.";
        return;
      }

      if (this.model.client_address.length == 0) {
        this.errorMessage="You must enter your full legal address here.";
        return;
      }

      if (this.model.client_city.length == 0) {
        this.errorMessage="You must enter your city, town or region here.";
        return;
      }

      if (this.model.client_postal.length == 0) {
        this.errorMessage="You must enter your postal code here.";
        return;
      }

      if (this.model.client_province.length == 0) {
        this.errorMessage="You must enter your province here.";
        return;
      }

      if (this.model.client_country.length == 0) {
        this.errorMessage="You must enter your country here.";
        return;
      }

      this.clearMessage()
      this.getNextPage();
  }

  /* *************************************************************************************************************** */
  checkPrimaryRepsNameAddress(): void {
    if (this.model.rep_primary_name.length == 0) {
      this.errorMessage="You must enter your Primary Representative's full legal name here.";
      return;
    }

    if (this.model.rep_primary_address.length == 0) {
      this.errorMessage="You must enter your Primary Representative's full legal address here.";
      return;
    }

    if (this.model.rep_primary_city.length == 0) {
      this.errorMessage="You must enter your Primary Representative's city, town or region here.";
      return;
    }

    if (this.model.rep_primary_postal.length == 0) {
      this.errorMessage="You must enter your Primary Representative's postal code here.";
      return;
    }

    if (this.model.rep_primary_province.length == 0) {
      this.errorMessage="You must enter your Primary Representative's province here.";
      return;
    }

    if (this.model.rep_primary_country.length == 0) {
      this.errorMessage="You must enter your Primary Representative's country here.";
      return;
    }

    this.clearMessage()
    this.getNextPage();
  }

  /* *************************************************************************************************************** */
  checkAlternateRepsNameAddress(): void {

    if (this.model.rep_alternate_name.length == 0) {
      this.errorMessage="You must enter your Alternate Representative's full legal name here.";
      return;
    }

    if (this.model.rep_alternate_address.length == 0) {
      this.errorMessage="You must enter your Alternate Representative's full legal address here.";
      return;
    }

    if (this.model.rep_alternate_city.length == 0) {
      this.errorMessage="You must enter your Alternate Representative's city, town or region here.";
      return;
    }

    if (this.model.rep_alternate_postal.length == 0) {
      this.errorMessage="You must enter your Alternate Representative's postal code here.";
      return;
    }

    if (this.model.rep_alternate_province.length == 0) {
      this.errorMessage="You must enter your Alternate Representative's province here.";
      return;
    }

    if (this.model.rep_alternate_country.length == 0) {
      this.errorMessage="You must enter your Alternate Representative's country here.";
      return;
    }

    this.clearMessage()
    this.getNextPage();
  }

  /* *************************************************************************************************************** */
  checkClientWishes() {
    this.getNextPage();
  }

  /* *************************************************************************************************************** */
  checkWitnessOneNameAddress(): void {
    if (this.model.witness_one_name.length == 0) {
      this.errorMessage="You must enter your first Witness's full legal name here.";
      return;
    }

    if (this.model.witness_one_address.length == 0) {
      this.errorMessage="You must enter your first Witness's full legal address here.";
      return;
    }

    if (this.model.witness_one_city.length == 0) {
      this.errorMessage="You must enter your first Witness's city, town or region here.";
      return;
    }

    if (this.model.witness_one_postal.length == 0) {
      this.errorMessage="You must enter your first Witness's postal code here.";
      return;
    }

    if (this.model.witness_one_province.length == 0) {
      this.errorMessage="You must enter your first Witness's province here.";
      return;
    }

    if (this.model.witness_one_country.length == 0) {
      this.errorMessage="You must enter your first Witness's country here.";
      return;
    }

    this.clearMessage()
    this.getNextPage();

  }

  /* *************************************************************************************************************** */
  checkWitnessTwoNameAddress(): void {
    if (this.model.witness_two_name.length == 0) {
      this.errorMessage="You must enter your second Witness's full legal name here.";
      return;
    }

    if (this.model.witness_two_address.length == 0) {
      this.errorMessage="You must enter your second Witness's full legal address here.";
      return;
    }

    if (this.model.witness_two_city.length == 0) {
      this.errorMessage="You must enter your second Witness's city, town or region here.";
      return;
    }

    if (this.model.witness_two_postal.length == 0) {
      this.errorMessage="You must enter your second Witness's postal code here.";
      return;
    }

    if (this.model.witness_two_province.length == 0) {
      this.errorMessage="You must enter your second Witness's province here.";
      return;
    }

    if (this.model.witness_two_country.length == 0) {
      this.errorMessage="You must enter your second Witness's country here.";
      return;
    }

    this.clearMessage()
    this.getNextPage();

  }

  /* *************************************************************************************************************** */
  checkRep1Name(): void {
    if (this.model.rep_primary_name.length == 0) {
      this.errorMessage = "You must enter your Primary Representative's full legal name here.";
      return;
    }

    this.clearMessage()
    this.getNextPage();
  }

  /* *************************************************************************************************************** */
  checkRep2Name(): void {
    if (this.model.rep_alternate_name.length == 0) {
      this.errorMessage = "You must enter your Alternate Representative's full legal name here.";
      return;
    }

    this.clearMessage()
    this.getNextPage();
  }

  cancelWizard() {
    this.model.client_name = '';
    this.model.client_address ='';
    this.model.client_city ='';
    this.model.client_postal ='';
    this.model.client_province ='';
    this.model.client_country ='';

    this.model.rep_primary_name = '';
    this.model.rep_primary_address ='';
    this.model.rep_primary_city ='';
    this.model.rep_primary_postal ='';
    this.model.rep_primary_province ='';
    this.model.rep_primary_country ='';

    this.model.rep_alternate_name = '';
    this.model.rep_alternate_address ='';
    this.model.rep_alternate_city ='';
    this.model.rep_alternate_postal ='';
    this.model.rep_alternate_province ='';
    this.model.rep_alternate_country ='';

    this.model.witness_one_name = '';
    this.model.witness_one_address ='';
    this.model.witness_one_city ='';
    this.model.witness_one_postal ='';
    this.model.witness_one_province ='';
    this.model.witness_one_country ='';

    this.model.witness_two_name = '';
    this.model.witness_two_address ='';
    this.model.witness_two_city ='';
    this.model.witness_two_postal ='';
    this.model.witness_two_province ='';
    this.model.witness_two_country ='';

    this.model.optional_wishes = '';

    this.setClientDefaults();
    this.setRepOneDefaults();
    this.setRepTwoDefaults();

    this.page = 0;
    this.clearMessage()
    this.setClientDefaults();
  }

  cancelClientInfo() {
  /*  this.model.client_name = '';
    this.model.client_address ='';
    this.model.client_city ='';
    this.model.client_postal ='';
    this.model.client_province ='';
    this.model.client_country ='';
    this.model.signing_date = this.now;
*/


  }

  cancelPrimaryRepInfo() {
   /* this.model.rep_primary_name = '';
    this.model.rep_primary_address ='';
    this.model.rep_primary_city ='';
    this.model.rep_primary_postal ='';
    this.model.rep_primary_province ='';
    this.model.rep_primary_country ='';*/

   /* this.page = this.page-1;
    this.clearMessage()
    this.setRepOneDefaults();*/
  }

  cancelAlternateRepInfo() {
   /* this.model.rep_alternate_name = '';
    this.model.rep_alternate_address ='';
    this.model.rep_alternate_city ='';
    this.model.rep_alternate_postal ='';
    this.model.rep_alternate_province ='';
    this.model.rep_alternate_country ='';*/

    this.page = this.page-1;
    this.clearMessage()
    this.setRepTwoDefaults();
  }

  cancelWishesInfo() {
    this.model.optional_wishes = '';
    this.page = this.page-1;
    this.clearMessage();
  }

  cancelWitnessOneInfo() {
   /* this.model.witness_one_name= '';
    this.model.witness_one_address= '';
    this.model.witness_one_city= '';
    this.model.witness_one_province= '';
    this.model.witness_one_postal= '';
    this.model.witness_one_country= '';*/

    this.page = this.page-1;
    this.clearMessage();
    this.setWitnessOneDefaults();
  }

  cancelWitnessTwoInfo() {
  /*  this.model.witness_two_name= '';
    this.model.witness_two_address= '';
    this.model.witness_two_city= '';
    this.model.witness_two_province= '';
    this.model.witness_two_postal= '';
    this.model.witness_two_country= '';*/

    this.page = this.page-1;
    this.clearMessage();
    this.setWitnessTwoDefaults();
  }

  getCurrentDate() {
    var today = new Date();
    let dd = String(today.getDate()).padStart(2, '0');
    let mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
    let yyyy = today.getFullYear();

    this.now = yyyy +'/' + mm +'/' + dd;
    this.model.signing_date = this.now;
  }

  addSameAddressforPrimaryRep() {
    this.model.rep_primary_address = this.model.client_address;
    this.model.rep_primary_city = this.model.client_city;
    this.model.rep_primary_province = this.model.client_province;
    this.model.rep_primary_postal = this.model.client_postal;
    this.model.rep_primary_country = this.model.client_country;
  }

  addSameAddressforAlternateRep() {
    this.model.rep_alternate_address = this.model.client_address;
    this.model.rep_alternate_city = this.model.client_city;
    this.model.rep_alternate_province = this.model.client_province;
    this.model.rep_alternate_postal = this.model.client_postal;
    this.model.rep_alternate_country = this.model.client_country;
  }

  clearMessage() {
    this.errorMessage='';
  }

  setClientDefaults() {
    this.model.client_name='Karen Gail Allan';
    this.model.client_address='East 48 Woodstock Avenue'
    this.model.client_city='Vancouver'
    this.model.client_postal='V5M-0B7'
    this.model.client_province='British Columbia';
    this.model.client_country='Canada';
  }

  setRepOneDefaults() {
    this.model.rep_primary_name='Michael Roy Allan';
  }

  setRepTwoDefaults() {
    this.model.rep_alternate_name='Nathan Emory Allan';
    this.model.rep_alternate_address='1709 East 37th Street'
    this.model.rep_alternate_city='Vancouver'
    this.model.rep_alternate_postal='V5R-1R7'
    this.model.rep_alternate_province='British Columbia';
    this.model.rep_alternate_country='Canada';
  }

  setWitnessOneDefaults() {
    this.model.witness_one_name='Janice Lee McKai';
    this.model.witness_one_address='315-416, Sutton Crescent'
    this.model.witness_one_city='Kelowna'
    this.model.witness_one_postal='V1V-2J8'
    this.model.witness_one_province='British Columbia';
    this.model.witness_one_country='Canada';
  }

  setWitnessTwoDefaults() {
    this.model.witness_two_name='April Jones';
    this.model.witness_two_address='#27 - 870 West 7th Avenue'
    this.model.witness_two_city='Vancouver'
    this.model.witness_two_postal='V5Z-4C1'
    this.model.witness_two_province='British Columbia';
    this.model.witness_two_country='Canada';
  }

  /*printDocument() {
    this.printForm=true;
    this.repNineComponent.setModel(this.model);
    this.page=0;
  }*/

  /* *************************************************************************************************************** */
  openModal() {
   /* const dialogConfig = new MatDialogConfig();
    // The user can't close the dialog by clicking outside its body
    dialogConfig.disableClose = false;
    dialogConfig.id = "modal-component";

    let modalDialog = this.matDialog.open(PlanWizardPopupComponent, dialogConfig);
    // modalDialog.componentInstance.setWishes(this.wishes);
    modalDialog.componentInstance.setDate(this.now);
    // modalDialog.componentInstance.setDefaultName(this.wishes.client_name);
    modalDialog.componentInstance.event.subscribe(resp => {
      // this.wishes = resp.wishes;
      this.printForm = resp.print;
      modalDialog.close();
    })*/
    // modalDialog.afterClosed().subscribe(() => {this.printWishes();});
  }

 }

<ng-container *ngIf="page === 0">
    <div class="screen-title pad-top-2">
        <h2>{{ title }}</h2>
    </div>


    <div class="content-dark-copy pad-top">
        <p>
            If you are in an accident or suffer a critical illness and end up in Emergency and are incapable of
            answering for yourself, the first thing the hospital will look for is information about your next of kin.
            They will start at the top of a list called the Temporary Substitute Decision Maker (TSDM) that is set by law. If
            the
            first person on that list
            is not qualified or available to advocate for you, they will then move down the list.
            By law they must go by the hierarchy set out on this form which is:
            <br><br>
            Spouse > Adult Children if any > Parents > Siblings > Grandparents > Grandchildren > Others Related by Birth or Adoption >
            Close Friend(s) and Others related by marriage. There is also a place to enter one or two people who you DO NOT
            wish to have any say over your health or well-being.
        </p>
    </div>

    <ul class="content-dark-list square">
        <span>To qualify as a Substitute Decision Maker, your chosen person(s) must be:</span>
        <li class="list-item">19 or over</li>
        <li class="list-item">be mentally capable of making decisions</li>
        <li class="list-item">have no dispute with you</li>
        <li class="list-item">must not be paid by you for personal care or health care services</li>
        <li class="list-item">must not be an employee of a facility in which you reside and receive personal care or
            health care services from unless this person is your child, spouse or parent
        </li>
        <li class="list-item">have been in contact with you within the year before you need care</li>
    </ul>

    <div class="content-dark-copy pad-top">
        <p>
            To learn more about what a Representative Section-9 advocate can and can not do regarding advocating for your health
            should you be unable to do so (partially or completely) please go to <a routerLink="/chooseRep">Choosing your
            Representative.</a>
            <br><br>
            However, if you are ready to complete the Representative Section-9 form now, use this wizard to take you through the process.
            Once done you can print it, and sign it along with your primary representative, alternative representative (if applicable)
            all in the presence of your witnesses. Store it away in a safe place, making sure your Representative knows it's whereabouts.
            <br><br>
            It may hurt a bit but you can stop anytime and come back whenever you are more ready. Once done, pat yourself on the back and
            reward yourself in any way you prefer to be rewarded :).
        </p>
    </div>
    -->

    <div class="one-button-container pad-top">
        <button class="start-button" (click)="getNextPage()">START</button>
    </div>
</ng-container>

<!-- CLIENT INFO -->
<ng-container *ngIf="page === 1">
    <div class="content-dark-copy pad-top">
        <p>
            Made under Section 9 of the Representation Agreement Act.
            The use of this form is voluntary. Be advised that this form may not be appropriate for use by all persons, as it provides only
            one option of
            how a Representation Agreement may be made. In addition, it does not constitute legal advice. For further information, please
            consult the
            Representation Agreement Act and Representation Agreement Regulation or obtain legal advice.
            <br><br>
            This form reflects the law at the date of publication. Laws can change over time. Before using this form, you should review the
            relevant
            legislation to ensure that there have not been any changes to the legislation or section numbers.
        </p>
    </div>

    <div class="screen-title pad-top-2">
        <h2>THIS REPRESENTATION AGREEMENT IS MADE BY ME, THE ADULT:</h2>
    </div>

    <div class="content-dark-copy pad-top">
        <p>
            'THE ADULT' means you as the person appointing your Representative(s). <br>
            Enter your full legal name, full address and the date that you are filling out, printing and having the document witnessed. If
            you want to
            leave the date to enter at the time when you can have the Reps and Witnesses together, erase this default date and enter the
            date later.
        </p>
    </div>

    <div class="one-button-container pad-top-2">
        <button class='start-button ' (click)="openModal()">START</button>
    </div>

    <form #repNineForm="ngForm" novalidate>
        <div class="forms-content-block with-dark-border">
            <div class="full-text-column">
                <ng-container *ngIf="errorMessage">
                    <div class="errorMessage red">{{ errorMessage }}</div>
                </ng-container>
                <ng-container *ngIf="!errorMessage">
                    <div class="errorMessage">&nbsp;</div>
                </ng-container>
            </div>

            <div class="two-unequal-columns-block">
                <label class="first-text-column" for="client_name">Your Name:</label>
                <label class="second-text-column" for="default_date">Date: (YYYY / MM / DD):</label>

                <input [(ngModel)]="model.client_name" type="text" class="first-text-column required" id="client_name" name="name">
                <input [(ngModel)]="model.signing_date" type="text" class="second-text-column" id="default_date" name="todaysDate">
            </div>

            <div class="full-line-prompt">
                <label class="first-text-column" for="client_address">Your Address:</label>
                <input [(ngModel)]="model.client_address" type="text" id="txtArea" class="first-text-column required" id="client_address"
                       name="address">
            </div>

            <div class="four-columns-block">
                <label class="first-text-column" for="city">City/Town:</label>
                <label class="second-text-column" for="postal">Postal Code (xxx-xxx):</label>

                <label class="third-text-column" for="province">Province:</label>
                <label class="fourth-text-column" for="country">Country:</label>

                <input [(ngModel)]="model.client_city" type="text" class="first-text-column required" id="city" name="city">

                <input [(ngModel)]="model.client_postal" type="text"
                       mask="U0U-0U0"
                       class="second-text-column required" id="postal" name="postal" oninput="this.value = this.value.toUpperCase()">

                <div class="form-group">
                    <select class="third-text-column required" id="province" required
                            [(ngModel)]="model.client_province" name="province">
                        <option *ngFor="let prov of provinces" [value]="prov">{{ prov }}</option>
                    </select>
                </div>

                <input [(ngModel)]="model.client_country" type="text" class="fourth-text-column required" id="country" name="country">
            </div>

            <!--       <div class="two-unequal-columns-block">
                       <label class="first-text-column" for="province">Province:</label>
                       <label class="second-text-column" for="country">Country:</label>

                       <div class="form-group">
                           <select class="first-text-column required" id="province" required
                               [(ngModel)]="model.client_province" name="province">
                               <option *ngFor="let prov of provinces" [value]="prov">{{prov}}</option>
                           </select>
                       </div>

                       <input [(ngModel)]="model.client_country" type="text" class="second-text-column required" id="country" name="country">
                   </div>-->
        </div>

        <div class="two-buttons-container">
            <button class="cancel-button" (click)="cancelClientInfo()">CANCEL</button>
            <button class="next-second-button" (click)="checkClientNameAddress()">NEXT</button>
        </div>
    </form>
</ng-container>

<!-- PRIMARY REP INFO -->
<ng-container *ngIf="page === 2">
    <div class="show-page">
        <ng-container
            *ngIf="model.client_name.length > 0 && model.client_address.length > 0 && model.client_city.length > 0 && model.client_province.length > 0">
            <h1>Rep-9 for {{ model.client_name }} of
                <br>{{ model.client_address }},
                <br>{{ model.client_city }}, {{ model.client_province }}, {{ model.client_postal }}</h1>
        </ng-container>

        <span>Enter the full legal name and address for the Primary Representative you have chosen.</span>

        <h2>PRIMARY REPRESENTATIVE:</h2>

        <div class="page-overview">
            I name the following person to be my Primary Representative:
        </div>

        <form #repNineForm="ngForm" novalidate>
            <div class="wizard-grid">
                <div class="full-line">
                    <ng-container *ngIf="errorMessage">
                        <div class="errorMessage">{{ errorMessage }}</div>
                    </ng-container>
                    <ng-container *ngIf="!errorMessage">
                        <div class="errorMessage">&nbsp;</div>
                    </ng-container>
                </div>

                <div class="full-line">
                    <label class="first-text-column" for="rep_1_name">Primary Representative's Name:</label>
                    <input [(ngModel)]="model.rep_primary_name" type="text" class="first-text-column" id="rep_1_name" name="name">
                </div>

                <div class="same-address-container">
                    <button class="first-button" (click)="addSameAddressforPrimaryRep()">MY PRIMARY REPRESENTATIVE IS AT SAME ADDRESS AS
                        ME
                    </button>
                </div>

                <div class="full-line">
                    <label class="first-text-column" for="rep_1_address">Primary Representative's Full Address:</label>
                    <input [(ngModel)]="model.rep_primary_address" type="text" class="first-text-column" id="rep_1_address" name="address">
                </div>

                <div class="two-unequal-columns-block">
                    <label class="first-text-column" for="rep_1_city">City/Town:</label>
                    <label class="second-text-column" for="rep_1_postal">Postal Code:</label>

                    <input [(ngModel)]="model.rep_primary_city" type="text" class="first-text-column" id="rep_1_city" name="city">
                    <input [(ngModel)]="model.rep_primary_postal" type="text" mask="U0U-0U0"
                           class="second-text-column" id="rep_1_postal" name="postal" oninput="this.value = this.value.toUpperCase()">
                </div>

                <div class="two-unequal-columns-block">
                    <label class="first-text-column" for="rep_1_province">Province:</label>
                    <label class="second-text-column" for="rep_1_country">Country:</label>

                    <div class="form-group">
                        <select class="first-text-column" id="rep_1_province" required
                                [(ngModel)]="model.rep_primary_province" name="province">
                            <option *ngFor="let prov of provinces" [value]="prov">{{ prov }}</option>
                        </select>
                    </div>
                    <input [(ngModel)]="model.rep_primary_country" type="text" class="second-text-column" id="rep_1_country" name="country">
                </div>
            </div>

            <div class="three-buttons-container">
                <button class="first-button uniform-width" (click)="cancelPrimaryRepInfo()">BACK</button>
                <button class="second-button uniform-width" (click)="cancelWizard()">CANCEL</button>
                <button class="third-button uniform-width" (click)="checkPrimaryRepsNameAddress()">NEXT</button>
            </div>
        </form>
    </div>
</ng-container>

<!-- ALTERNATE REPRESENTATIVE -->
<ng-container *ngIf="page === 3">
    <div class="show-page">
        <ng-container
            *ngIf="model.client_name.length > 0 && model.client_address.length > 0 && model.client_city.length > 0 && model.client_province.length > 0">
            <h1>Rep-9 for {{ model.client_name }} of
                <br>{{ model.client_address }},
                <br>{{ model.client_city }}, {{ model.client_province }}, {{ model.client_postal }}</h1>
        </ng-container>

        <span>Enter the full legal name and address for the Primary Representative you have chosen. If you don't want to specify an
                Primary Rep, then press SKIP</span>

        <h2>ALTERNATE REPRESENTATIVE:</h2>

        <div class="page-overview">
            I name the following person to be my Alternate Representative:
        </div>

        <form #repNineForm="ngForm" novalidate>
            <div class="wizard-grid">
                <div class="full-line">
                    <ng-container *ngIf="errorMessage">
                        <div class="errorMessage">{{ errorMessage }}</div>
                    </ng-container>
                    <ng-container *ngIf="!errorMessage">
                        <div class="errorMessage">&nbsp;</div>
                    </ng-container>
                </div>

                <div class="full-line">
                    <label class="first-text-column" for="rep_2_name">Alternate Representative's Name:</label>
                    <input [(ngModel)]="model.rep_alternate_name" type="text" class="first-text-column" id="rep_2_name" name="name">
                </div>

                <div class="same-address-container">
                    <button class="first-button  big-width" (click)="addSameAddressforAlternateRep()">MY ALTERNATE REPRESENTATIVE IS AT SAME
                        ADDRESS AS ME
                    </button>
                </div>

                <div class="full-line">
                    <label class="first-text-column" for="rep_2_address">Alternate Representative's Full Address:</label>
                    <input [(ngModel)]="model.rep_alternate_address" #rep_2_address type="text" class="first-text-column" id="rep_2_address"
                           name="address">
                </div>

                <div class="two-unequal-columns-block">
                    <label class="first-text-column" for="rep_2_city">City/Town:</label>
                    <label class="second-text-column" for="rep_2_postal">Postal Code:</label>

                    <input [(ngModel)]="model.rep_alternate_city" #rep_2_city type="text" class="first-text-column" id="rep_2_city"
                           name="city">
                    <input [(ngModel)]="model.rep_alternate_postal" type="text" mask="U0U-0U0"
                           class="second-text-column" id="rep_2_postal" name="postal" oninput="this.value = this.value.toUpperCase()">
                </div>

                <div class="two-unequal-columns-block">
                    <label class="first-text-column" for="rep_2_province">Province:</label>
                    <label class="second-text-column" for="rep_2_country">Country:</label>

                    <div class="form-group">
                        <select class="first-text-column" id="rep_2_province" required
                                [(ngModel)]="model.rep_alternate_province" name="province">
                            <option *ngFor="let prov of provinces" [value]="prov">{{ prov }}</option>
                        </select>
                    </div>
                    <input [(ngModel)]="model.rep_alternate_country" #rep_2_country type="text" class="second-text-column"
                           id="rep_2_country" value='Canada'
                           name="country">
                </div>
            </div>

            <div class="four-buttons-container">
                <button class="first-button uniform-width" (click)="cancelAlternateRepInfo()">BACK</button>
                <button class="second-button uniform-width" (click)="cancelWizard()">CANCEL</button>
                <button class="third-button uniform-width" (click)="checkAlternateRepsNameAddress()">NEXT</button>
                <button class="fourth-button uniform-width" (click)="getNextPage()">SKIP</button>
            </div>
        </form>
    </div>
</ng-container>

<!-- WISHES -->
<div *ngIf="page === 4">
    <div class="show-page">
        <ng-container
            *ngIf="model.client_name.length > 0 && model.client_address.length > 0 && model.client_city.length > 0 && model.client_province.length > 0">
            <h1>Rep-9 for {{ model.client_name }} of
                <br>{{ model.client_address }},
                <br>{{ model.client_city }}, {{ model.client_province }}, {{ model.client_postal }}</h1>
        </ng-container>

        <span>This area allows you to fill in any special directives you may have related to special emergency measures such as CPR or
                    can be about your wishes. To write out a more detailed directive choose to fill out the Advanced Care Directive form
                    which allows you to narrow down your specificities, wishes and concerns about end of life care. If you do not want to
                    fill this section out, press SKIP.</span>

        <h2>INSTRUCTIONS OR WISHES (OPTIONAL):</h2>

        <div class="page-overview">
            The following are my instructions or wishes with respect to decisions that will be made within the areas of authority given to
            my Representative under this Representation Agreement:
        </div>

        <div class="wizard-grid">
            <form #repNineForm="ngForm" novalidate>
                <div class="full-line">
                    <label class="first-text-column" for="wishes">My Wishes:</label>
                    <textarea class="full-text-column" rows=12 [(ngModel)]="model.optional_wishes" id="wishes"
                              name="optionalWishes"> </textarea>
                </div>

                <div class="four-buttons-container">
                    <button class="first-button uniform-width" (click)="cancelWishesInfo()">BACK</button>
                    <button class="second-button uniform-width" (click)="cancelWizard()">CANCEL</button>
                    <button class="third-button uniform-width" (click)="checkClientWishes()">NEXT</button>
                    <button class="fourth-button uniform-width" (click)="getNextPage()">SKIP</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- FIRST WITNESS -->
<div *ngIf="page === 5">
    <div class="show-page">
        <ng-container
            *ngIf="model.client_name.length > 0 && model.client_address.length > 0 && model.client_city.length > 0 && model.client_province.length > 0">
            <h1>Rep-9 for {{ model.client_name }} of
                <br>{{ model.client_address }},
                <br>{{ model.client_city }}, {{ model.client_province }}, {{ model.client_postal }}</h1>
        </ng-container>

        <span>Enter the full legal name and address for the first Witness you have chosen. If the Witness is signing the document on this day,
                    you can leave the default date in. If they will be signing at a later date, you can erase the default date and after printing this document
                    you can enter the date of the witnessing. You must also have the Witness sign the form at the same time you do so.
                    <br><br>
                    If you are having this witnessed by a Lawyer or a Member of the Society of Notaries Public of British Columbia, you only need this one Witness.
                </span>

        <h2>WITNESS NO. 1:</h2>

        <div class="page-overview">
            Witness No. 1 must sign in the presence of the Adult and Witness No. 2.:
        </div>

        <div class="wizard-grid">
            <form #repNineForm="ngForm" novalidate>
                <div class="full-line">
                    <ng-container *ngIf="errorMessage">
                        <div class="errorMessage">{{ errorMessage }}</div>
                    </ng-container>
                    <ng-container *ngIf="!errorMessage">
                        <div class="errorMessage">&nbsp;</div>
                    </ng-container>
                </div>

                <div class="two-unequal-columns-block">
                    <label class="first-text-column" for="witness_1_name">First Witness's Name:</label>
                    <label class="second-text-column" for="witness_1_date">Signed On: (YYYY / MM / DD):</label>

                    <input [(ngModel)]="model.witness_one_name" type="text" class="first-text-column" id="witness_1_name" name="name">
                    <input [(ngModel)]="model.signing_date" type="text" class="second-text-column" id="witness_1_date" name="todaysDate">
                </div>

                <div class="full-line">
                    <label class="first-text-column" for="witness_1_address">Witness's Full Address:</label>
                    <input [(ngModel)]="model.witness_one_address" type="text" class="first-text-column" id="witness_1_address"
                           name="address">
                </div>

                <div class="two-unequal-columns-block">
                    <label class="first-text-column" for="witness_1_city">City/Town:</label>
                    <label class="second-text-column" for="witness_1_postal">Postal Code:</label>

                    <input [(ngModel)]="model.witness_one_city" type="text" class="first-text-column" id="witness_1_city" name="city">
                    <input [(ngModel)]="model.witness_one_postal" type="text" mask="U0U-0U0"
                           class="second-text-column" id="witness_1_postal" name="postal" oninput="this.value = this.value.toUpperCase()">
                </div>

                <div class="two-unequal-columns-block">
                    <label class="first-text-column" for="witness_1_province">Province:</label>
                    <label class="second-text-column" for="witness_1_country">Country:</label>

                    <div class="form-group">
                        <select class="first-text-column" id="witness_1_province" required
                                [(ngModel)]="model.witness_one_province" name="province">
                            <option *ngFor="let prov of provinces" [value]="prov">{{ prov }}</option>
                        </select>
                    </div>
                    <input [(ngModel)]="model.witness_one_country" type="text" class="second-text-column" id="witness_1_country"
                           value='Canada' name="country">
                </div>

                <div class="three-buttons-container">
                    <button class="first-button uniform-width" (click)="cancelWitnessOneInfo()">BACK</button>
                    <button class="second-button uniform-width" (click)="cancelWizard()">CANCEL</button>
                    <button class="third-button uniform-width" (click)="checkWitnessOneNameAddress()">NEXT</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- SECOND WITNESS -->
<div *ngIf="page === 6">
    <div class="show-page">
        <ng-container
            *ngIf="model.client_name.length > 0 && model.client_address.length > 0 && model.client_city.length > 0 && model.client_province.length > 0">
            <h1>Rep-9 for {{ model.client_name }} of
                <br>{{ model.client_address }},
                <br>{{ model.client_city }}, {{ model.client_province }}, {{ model.client_postal }}</h1>
        </ng-container>

        <span>Enter the full legal name and address for the second Witness you have chosen. If the Witness is signing the document on this day,
                    you can leave the default date in. If they will be signing at a later date, you can erase the default date and after printing this document
                    you can enter the date of the witnessing. You must also have the Witness sign the form at the same time you do so.
                    <br><br>
                    If you are having this witnessed by a Lawyer or a Member of the Society of Notaries Public of British Columbia, you can SKIP this.
                </span>

        <h2>WITNESS NO. 2:</h2>

        <div class="page-overview">
            Witness No. 2 must sign in the presence of the Adult and Witness No. 1.:
        </div>

        <div class="wizard-grid">
            <form #repNineForm="ngForm" novalidate>
                <div class="full-line">
                    <ng-container *ngIf="errorMessage">
                        <div class="errorMessage">{{ errorMessage }}</div>
                    </ng-container>
                    <ng-container *ngIf="!errorMessage">
                        <div class="errorMessage">&nbsp;</div>
                    </ng-container>
                </div>

                <div class="two-unequal-columns-block">
                    <label class="first-text-column" for="witness_2_name">Second Witness's Name:</label>
                    <label class="second-text-column" for="witness_2_date">Signed On: (YYYY / MM / DD):</label>

                    <input [(ngModel)]="model.witness_two_name" type="text" class="first-text-column" id="witness_2_name" name="name">
                    <input [(ngModel)]="model.signing_date" type="text" class="second-text-column" id="witness_2_date" name="todaysDate">
                </div>

                <div class="full-line">
                    <label class="first-text-column" for="witness_2_address">Witness's Full Address:</label>
                    <input [(ngModel)]="model.witness_two_address" type="text" class="first-text-column" id="witness_2_address"
                           name="address">
                </div>

                <div class="two-unequal-columns-block">
                    <label class="first-text-column" for="witness_2_city">City/Town:</label>
                    <label class="second-text-column" for="witness_2_postal">Postal Code:</label>

                    <input [(ngModel)]="model.witness_two_city" type="text" class="first-text-column" id="witness_2_city" name="city">
                    <input [(ngModel)]="model.witness_two_postal" type="text" mask="U0U-0U0"
                           class="second-text-column" id="witness_2_postal" name="postal" oninput="this.value = this.value.toUpperCase()">
                </div>

                <div class="two-unequal-columns-block">
                    <label class="first-text-column" for="witness_2_province">Province:</label>
                    <label class="second-text-column" for="witness_2_country">Country:</label>

                    <div class="form-group">
                        <select class="first-text-column" id="witness_2_province" required
                                [(ngModel)]="model.witness_two_province" name="province">
                            <option *ngFor="let prov of provinces" [value]="prov">{{ prov }}</option>
                        </select>
                    </div>
                    <input [(ngModel)]="model.witness_two_country" type="text" class="second-text-column" id="witness_2_country"
                           name="country">
                </div>

                <div class="four-buttons-container">
                    <button class="first-button uniform-width" (click)="cancelWitnessTwoInfo()">BACK</button>
                    <button class="second-button uniform-width" (click)="cancelWizard()">CANCEL</button>
                    <button class="third-button uniform-width" (click)="checkWitnessTwoNameAddress()">NEXT</button>
                    <button class="fourth-button uniform-width" (click)="getNextPage()">SKIP</button>
                </div>

            </form>
        </div>
    </div>
</div>

<!-- SHOW VALUES AND PRINT -->
<div *ngIf="page === 7">
    <div class="show-page">
        <ng-container
            *ngIf="model.client_name.length > 0 && model.client_address.length > 0 && model.client_city.length > 0 && model.client_province.length > 0">
            <h1>Rep-9 for {{ model.client_name }} of
                <br>{{ model.client_address }},
                <br>{{ model.client_city }}, {{ model.client_province }}, {{ model.client_postal }}</h1>
        </ng-container>

        <span>Congratulations! You have filled out your Representative Section-9 form. Select Print to print it. After printing, you
                    can have your Representative(s) and Witnesses sign in your presence while you sign in their presence. Put this form in
                    a safe location like a fire and water proof safe. Make sure your Reps and family know the whereabouts of this document.
                    And relax, the hard part is over!
                </span>

        <h2>YOUR INFO:</h2>

        <div class="page-overview">
            <ng-container *ngIf="model.rep_primary_name.length > 0">
                Your Primary Representative is {{ model.rep_primary_name }}, who lives at {{ model.rep_primary_address }}
                in {{ model.rep_primary_city }},
                {{ model.rep_primary_province }}, {{ model.rep_primary_country }}.
            </ng-container>

            <ng-container *ngIf="model.rep_alternate_name.length > 0">
                <br><br>
                Your Alternate Representative is {{ model.rep_alternate_name }}, who lives at {{ model.rep_alternate_address }}
                in {{ model.rep_alternate_city }},
                {{ model.rep_alternate_province }}, {{ model.rep_alternate_country }}.
            </ng-container>

            <ng-container *ngIf="model.rep_alternate_name.length == 0">
                <br><br>
                Your have decided not to choose an Alternate Representative.
            </ng-container>

            <ng-container *ngIf="model.witness_one_name.length > 0">
                <br><br>
                Your Witness 1 is {{ model.witness_one_name }}, who lives at {{ model.witness_one_address }} in {{ model.witness_one_city }}
                ,
                {{ model.witness_one_province }}, {{ model.witness_one_country }}.
            </ng-container>

            <ng-container *ngIf="model.witness_two_name.length > 0">
                <br><br>
                Your Witness 2 is {{ model.witness_two_name }}, who lives at {{ model.witness_two_address }} in {{ model.witness_two_city }}
                ,
                {{ model.witness_two_province }}, {{ model.witness_two_country }}.
            </ng-container>

            <ng-container *ngIf="model.witness_two_name.length == 0">
                <br><br>
                Your have not chosen a second Witness. This means you are choosing either a Lawyer or a Notary Public to sign, in which
                case, only one
                Witness is needed.
            </ng-container>

            <ng-container *ngIf="model.optional_wishes.length > 0">
                <br><br>
                Your wishes and advanced directive requests are as follows:<br>
                {{ model.optional_wishes }}
            </ng-container>

            <ng-container *ngIf="model.optional_wishes.length == 0">
                <br><br>
                Your have not added any wishes or advanced care requests.
            </ng-container>
        </div>
    </div>
</div>



